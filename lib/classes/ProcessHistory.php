<?php
include_once 'ProcessLog.php';

class ProcessHistory {
    const STATUS_STARTED = 0;
    const STATUS_SUCCESS = 1;
    const STATUS_FAILURE = 2;

    /** @var int */
    private $id;
    /** @var string */
    private $startDate;
    /** @var string */
    private $name;
    /** @var string */
    private $endDate;
    /** @var string */
    private $outputMessage;
    /** @var int */
    private $status;
    /** @var ProcessLog[] */
    private $logs = null;
    private $updateNeeded = [];

    public function __construct($processName) {
        $this->name = substr($processName, 0, 64);
        $this->startDate = currentDate();
        $this->status = self::STATUS_STARTED;
    }

    /**
     * ******* GETTERS *******
     */
    /**
     *
     * @return number
     */
    public function getId() {
        return $this->id;
    }

    /**
     * Name of the process
     *
     * @return string
     */
    public function getName() {
        return $this->name;
    }

    /**
     * Date when the process started
     *
     * @return string
     */
    public function getStartDate() {
        return $this->startDate;
    }

    /**
     * Date when the process ended
     *
     * @return string
     */
    public function getEndDate() {
        return $this->endDate;
    }

    /**
     * Output message generated by the process
     *
     * @return string
     */
    public function getOutputMessage() {
        return $this->outputMessage;
    }

    /**
     * Status of the process.
     * Possible values are:
     * <ul>
     * <li>0: The process has started</li>
     * <li>1: The process ended successfully</li>
     * <li>2: The process ended with errors</li>
     * </ul>
     *
     * @return number
     */
    public function getStatus() {
        return $this->status;
    }

    /**
     *
     * @return ProcessLog[]
     */
    public function getLogs() {
        if ($this->logs === null) {
            $this->logs = ProcessLog::loadProcessLogs($this->id);
        }
        return $this->logs;
    }

    /**
     * ******* SETTERS *******
     */
    /**
     * Date when the process started
     *
     * @param string $value
     */
    public function setStartDate($value) {
        if ($value == $this->startDate) {
            return;
        }
        $this->startDate = $value;
        $this->updateNeeded[':startDate'] = 'START_DATE'; // Name of the field in DB
    }

    /**
     * Name of the process
     *
     * @param string $value
     */
    public function setName($value) {
        $value = substr($value, 0, 64);
        if ($value == $this->name) {
            return;
        }

        $this->name = $value;
        $this->updateNeeded[':processName'] = 'PROCESS_NAME'; // Name of the field in DB
    }

    /**
     * Date when the process ended
     *
     * @param string $value
     */
    public function setEndDate($value) {
        if ($value == $this->endDate) {
            return;
        }
        $this->endDate = $value;
        $this->updateNeeded[':endDate'] = 'END_DATE'; // Name of the field in DB
    }

    /**
     * Output message generated by the process
     *
     * @param string $value
     */
    public function setOutputMessage($value) {
        $value = substr($value, 0, 1024);
        if ($value == $this->outputMessage) {
            return;
        }
        $this->outputMessage = $value;
        $this->updateNeeded[':outputComments'] = 'OUTPUT_MESSAGE'; // Name of the field in DB
    }

    /**
     * Status of the process.
     * Possible values are:
     * <ul>
     * <li>0: The process has started</li>
     * <li>1: The process ended successfully</li>
     * <li>2: The process ended with errors</li>
     * </ul>
     *
     * @param int $value
     */
    public function setStatus($value) {
        if ($value == $this->status) {
            return;
        }
        $this->status = $value;
        $this->updateNeeded[':processStatus'] = 'STATUS'; // Name of the field in DB
    }

    /**
     * ******* METHODS *******
     */
    /**
     *
     * @param int $id
     * @return ProcessHistory
     */
    static public function getInstance($id) {
        $sql = 'SELECT * FROM PROCESS_HISTORY WHERE ID_PROCESS=:id';
        $rst = Database::getInstance()->ExecuteBindQuery($sql, $id);
        $obj = null;
        if ($rst->Next()) {
            $obj = self::loadDBRecord($rst);
        }

        return $obj;
    }

    /**
     *
     * @param DbManagerResults $rst
     * @return ProcessHistory
     */
    static private function loadDBRecord($rst) {
        $obj = new ProcessHistory($rst->GetField('PROCESS_NAME'));
        $obj->id = $rst->GetField('ID_PROCESS');
        $obj->startDate = $rst->GetField('START_DATE');
        $obj->endDate = $rst->GetField('END_DATE');
        $obj->outputMessage = $rst->GetField('OUTPUT_MESSAGE');
        $obj->status = $rst->GetField('STATUS');

        return $obj;
    }

    public function addLog($message) {
        $this->logs[] = new ProcessLog($this->id, $message);
    }

    /**
     */
    public function save() {
        $isNew = false;
        if (!$this->id) {
            // Create a new record
            $this->id = Database::getInstance()->getNextSequence('ID_PROCESS_SEQ');
            $isNew = true;
        }

        $arrVariables[':id'] = $this->id;
        $arrVariables[':processName'] = $this->name;
        $arrVariables[':startDate'] = $this->startDate;
        $arrVariables[':endDate'] = $this->endDate;
        $arrVariables[':outputComments'] = $this->outputMessage;
        $arrVariables[':processStatus'] = $this->status;

        $sql = null;
        if ($isNew) {
            $sql = 'INSERT INTO PROCESS_HISTORY (ID_PROCESS, PROCESS_NAME, START_DATE, END_DATE, OUTPUT_MESSAGE, STATUS)
                    VALUES (:id, :processName, :startDate, :endDate, :outputComments, :processStatus)';
        } elseif (count($this->updateNeeded) > 0) {
            $sqlUpdates = [];
            foreach ($this->updateNeeded as $varName => $fieldName) {
                $sqlUpdates[] .= "$fieldName = $varName";
            }
            $updateStr = implode(',', $sqlUpdates);
            $sql = "UPDATE PROCESS_HISTORY SET $updateStr WHERE ID_PROCESS=:id";
        }

        if ($sql) {
            Database::getInstance()->ExecuteBindQuery($sql, $arrVariables);
            $error = Database::getInstance()->getError();
            if (!$error->getCode()) {
                if ($this->logs) {
                    foreach ($this->logs as $log) {
                        $log->setProcessId($this->id);
                        $log->save();
                    }
                }
                $this->updateNeeded = [];
            }
        }
    }

    /**
     * Returns the last stored record of a process
     *
     * @param string $processName
     * @return ProcessHistory
     */
    static function findLast($processName) {
        $record = null;

        $sql = 'SELECT ID_PROCESS FROM (
                	SELECT ID_PROCESS FROM PROCESS_HISTORY WHERE PROCESS_NAME=:processName ORDER BY START_DATE DESC
                ) WHERE ROWNUM >=1 AND ROWNUM<2';
        $rst = Database::getInstance()->ExecuteBindQuery($sql, [':processName' => $processName]);
        if ($rst->Next()) {
            $record = self::getInstance($rst->GetField('ID_PROCESS'));
        }
        return $record;
    }
}